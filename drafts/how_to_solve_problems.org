#+Title: What I learned about problem solving from my thesis lab
#+Author: Tyler Burns
#+Date: March 24, 2023 - March 24, 2023

* My thesis laboratory
When I showed up to rotate at my thesis lab in 2012, I sat next to a guy named Matt. This was a biology lab, but he had a huge pile of circuit boards, tubes, and all kinds of other gizmos on his desk and adjacent lab bench. He was clearly building something big. So I chatted with him and he told me that he was automating some piece of his lab protocol that was too tedious and time consuming for him.

Cool, I thought. An engineer rotating in a biology lab. So of course I asked him what his background was. Electrical? Mechanical? Software? He said he's an immunologist who studies Lupus, and he's never taken a single engineering course in his life. He's just figuring it out himself as he goes.

What??? No classes? No exams? No engineering degree? No internship as an engineer in some company? No. He just wanted to automate some aspect of his protocol so he started figuring out how circuits work and started building from there.

In my years in my thesis lab, I met lots of people just like this. People who defied all expectations and managed to do all kinds of things without any formal training. What did all these people have in common? They were great problem solvers. My PI, Garry Nolan, had a knack for finding great and independent problem solvers, and grooming them from great to excellent if not outstanding problem solvers. A lot of that was osmosis. Garry himself knows a thing or two about solving problems, to say the least. He seems to develop a new technology that changes the world every five years or so. 

I became the guy who went from pure wet-lab biologist to dry-lab computational biologist on my own volition. I did not think such a thing was possible, or for that matter, being self employed doing that, before my exposure to the magic of my thesis lab.

Seeing what I've seen, I will try to distill what I learned about how to solve problems. There is a lot here that goes beyond Garry explaining things. But I was around him and the Nolan Lab for half a decade, having to solve a few tough problems myself along the way, so I can try to put it into words. I'll note from the outset that what I'm about to write about runs counter to a lot of the mainstream advice about solving problems and getting things done in general.

I talk a lot about this stuff over and over, and it's clear in my head. But memories fade, and I've been away from the lab for 5 years now. I need to get all of this on paper while it's all fresh, not just for you, but also (and mainly) for my future self. Let's get started.

* Simplify
When I took an intro CS class halfway through grad school for fun (I was 28), one of the first problem sets was to design Atari Breakout using a Java graphics library that Stanford provided. Altogether, this problem set was very complicated. How on Earth was I, a total beginner, supposed to make Atari breakout in a week?

One of the standard ways to solve problems is to decompose it into many pieces, and decompose the pieces into pieces, etc, until you have steps that are actionable. I'm going to assume you've heard this before. My problem was that even the act of decomposing the problem was stressful because there were so many pieces that I totally didn't know how to do that it was still hard to look at it all at the same time. 

* Reinvent the wheel

* Leverage what you know

* Conclusion
