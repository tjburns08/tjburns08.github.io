<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>The R Rabbit Hole</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="simple.css" />
<style>
  .dark-mode {
    --bg: #212121;
    --accent-bg: #2b2b2b;
    --text: #dcdcdc;
    --text-light: #ababab;
    --accent: #ffb300;
    /*--code: #f06292;*/
    --preformatted: #ccc;
    --disabled: #111;
  }
  .dark-mode img,
  .dark-mode video {
    opacity: 0.8;
  }
  .toggle-theme-btn {
      transform: scale(0.7);
      opacity: 0.4;
      transition: opacity 0.2s;
    }
    .toggle-theme-btn:hover {
      opacity: 0.4;
    }

  /* Code block wrapping: experiment */
    pre, code {
      white-space: pre-wrap;
      white-space: -moz-pre-wrap;
      white-space: -pre-wrap;
      white-space: -o-pre-wrap;
      word-wrap: break-word;
    }
</style>
<script>
 function toggleDarkMode() {
    const body = document.body;
    body.classList.toggle("dark-mode");
    // Save the user's theme preference to localStorage
    if (body.classList.contains("dark-mode")) {
      localStorage.setItem("theme", "dark");
    } else {
      localStorage.setItem("theme", "light");
    }
  }

  function setDefaultDarkMode() {
    // Retrieve the user's theme preference from localStorage
    const storedTheme = localStorage.getItem("theme");

    // If the stored theme is light, do nothing; otherwise, set it to dark
    if (storedTheme !== "light") {
      document.body.classList.add("dark-mode");
    }
  }

  // Set the default mode to dark when the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', setDefaultDarkMode);
</script>
</head>
<body>
<div id="preamble" class="status">
<div style="position: fixed; top: 10px; right: 10px;">
         <button class="toggle-theme-btn" onclick="toggleDarkMode()">Light/Dark</button>
       </div>
</div>
<div id="content" class="content">
<h1 class="title">The R Rabbit Hole</h1>
<p>
<a href="./index.html">Home</a>
</p>

<hr />
<p>
<i>I almost wish I hadn't gone down that rabbit-hole—and yet—and yet—it's rather curious, you know, this sort of life!</i>
</p>

<p>
Lewis Carroll, Alice's Adventures in Wonderland
</p>
<hr />

<div id="outline-container-org0a0b8b3" class="outline-2">
<h2 id="org0a0b8b3">From R to S</h2>
<div class="outline-text-2" id="text-org0a0b8b3">
<p>
What happens under the hood when we do simple arithmetic in R? Let's begin with a simple expression. Adding two numbers together.
</p>

<div class="org-src-container">
<pre class="src src-R">5 + 2
</pre>
</div>

<pre class="example">
[1] 7
</pre>


<p>
Now what we are going to do is ask the simple question: what is actually happening under the hood here? In my Advanced R class that I took around 2016, I learned that R uses an old concept called S-expressions, or symbolic expressions. The way this works is you have a list whereby the first element is a function, followed by the function arguments.
</p>

<p>
We know of this in the form:
function(arg1, arg2, &#x2026;)
</p>

<p>
But here with "+" we can actually express this in the same format and we will get the same result. Directly in R. You just have to put back ticks around the operator. Try it yourself.
</p>

<div class="org-src-container">
<pre class="src src-R">`+`(5, 2)
</pre>
</div>

<pre class="example">
[1] 7
</pre>


<p>
It turns out that R will internally parse 5 + 2 into the S-expression above. That is how 5 + 2 is actually represented behind the scenes in R.
</p>

<p>
S-expressions are a hallmark of an even older programming language called LISP (something Emacs users will still be famililar with today). If we want to see what S-expressions look like in this regard, consider the following LISP code below:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(+ 5 2)
</pre>
</div>

<pre class="example">
7
</pre>


<p>
You can see that it's an S-expression, like the one we made in R, but using parentheses. S-expressions are a completely different notation than we are used to, so they can be difficult to read at first. Let's say I wanted to do something like this:
</p>

<p>
2 * (5 + 2)
</p>

<p>
Which equals 14.
</p>

<p>
What that looks like as an S-expression is something like this, in LISP:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(* 2 (+ 5 2))
</pre>
</div>

<pre class="example">
14
</pre>


<p>
And lets say we wanted to divide the resulting answer by 7, which would give us 2. We have, in LISP:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(/ (* 2 (+ 5 2)) 7)
</pre>
</div>

<pre class="example">
2
</pre>


<p>
So you can imagine if you want to in turn take this product and do something else with it, and so forth, you will end up with parentheses wrapped in parentheses, and so forth. LISP programmers are used to it, and it is a bit of a <a href="https://xkcd.com/297/">running joke</a>.
</p>

<p>
But here's the rub: R operates like this too. Let me show you. Below is R, not LISP. Again, try this yourself:
</p>

<div class="org-src-container">
<pre class="src src-R">`/`(`*`(2, `+`(5, 2)), 7)
</pre>
</div>

<pre class="example">
[1] 2
</pre>


<p>
So now you can see objectively that R's arithmetic is using S-expressions, the way you would otherwise do in LISP.
</p>
</div>
</div>

<div id="outline-container-org459f94e" class="outline-2">
<h2 id="org459f94e">From S to C</h2>
<div class="outline-text-2" id="text-org459f94e">
<p>
Ok, this is all well and good, but how do I know that R specifically has S-expressions in mind? In order to answer that, we can download the <a href="https://cran.r-project.org/src/base/R-4/">source code</a> of the R programming language and have a look at it. We can see if any S-expressions are explicitly declared here. Below is the source code from R 4.4.0.
</p>

<p>
The directory looks like this:
</p>

<pre class="example">
drwxr-xr-x  27 tylerburns staff  864 Apr 24  2024 doc
drwxr-xr-x   8 tylerburns staff  256 Apr 24  2024 etc
drwxr-xr-x  19 tylerburns staff  608 Apr 24  2024 m4
drwxr-xr-x   7 tylerburns staff  224 Mar 27  2024 po
drwxr-xr-x  12 tylerburns staff  384 Apr 24  2024 share
drwxr-xr-x  13 tylerburns staff  416 Apr 24  2024 src
drwxr-xr-x 129 tylerburns staff 4.1K Apr 24  2024 tests
drwxr-xr-x  24 tylerburns staff  768 Apr 24  2024 tools
-rw-r--r--   1 tylerburns staff  18K Sep 25  2018 COPYING
-rw-r--r--   1 tylerburns staff  210 Sep 25  2018 ChangeLog
-rw-r--r--   1 tylerburns staff 1.8K Sep 25  2018 INSTALL
-rw-r--r--   1 tylerburns staff 5.4K Mar 24  2023 Makeconf.in
-rw-r--r--   1 tylerburns staff 7.1K Mar 25  2022 Makefile.fw
-rw-r--r--   1 tylerburns staff  11K Mar 27  2024 Makefile.in
-rw-r--r--   1 tylerburns staff 4.1K Sep 25  2018 README
-rw-r--r--   1 tylerburns staff   46 Apr 24  2024 SVN-REVISION
-rw-r--r--   1 tylerburns staff    6 Apr 24  2024 VERSION
-rw-r--r--   1 tylerburns staff   10 Apr 10  2024 VERSION-NICK
-rw-r--r--   1 tylerburns staff  19K Mar 27  2024 config.site
-rwxr-xr-x   1 tylerburns staff 1.7M Apr 24  2024 configure
-rw-r--r--   1 tylerburns staff 104K Mar 27  2024 configure.ac
-rw-r--r--   1 tylerburns staff  356 Mar 24  2023 configure.patch
</pre>

<p>
From here, you're going to go into src. And then main. The first observation is that a whole lot of this is written in C. Here is a slice of the "main" directory:
</p>

<pre class="example">
-rw-r--r--   1 tylerburns staff 8.0K Mar 27  2024 CommandLineArgs.c
  -rw-r--r--   1 tylerburns staff 8.4K Mar 27  2024 Makefile.in
  -rw-r--r--   1 tylerburns staff 2.8K Mar 27  2024 Makefile.win
  -rw-r--r--   1 tylerburns staff 1.3K Sep 25  2018 RBufferUtils.h
  -rw-r--r--   1 tylerburns staff  27K Mar 27  2024 RNG.c
  -rw-r--r--   1 tylerburns staff 1.9K Mar 29  2019 Rcomplex.h
  -rw-r--r--   1 tylerburns staff  51K Mar 27  2024 Rdynload.c
  -rw-r--r--   1 tylerburns staff  13K Mar 27  2024 Renviron.c
  -rw-r--r--   1 tylerburns staff 1.3K Sep 25  2018 Rmain.c
  -rw-r--r--   1 tylerburns staff  34K Mar 24  2023 Rstrptime.h
  -rw-r--r--   1 tylerburns staff  25K Mar 27  2024 agrep.c
  -rw-r--r--   1 tylerburns staff  14K Sep 25  2018 alloca.c
  -rw-r--r--   1 tylerburns staff  59K Mar 27  2024 altclasses.c
  -rw-r--r--   1 tylerburns staff  34K Mar 24  2023 altrep.c
  -rw-r--r--   1 tylerburns staff  14K Mar 27  2024 apply.c
  -rw-r--r--   1 tylerburns staff  65K Mar 27  2024 arithmetic.c
  -rw-r--r--   1 tylerburns staff 3.5K Mar 25  2022 arithmetic.h
  -rw-r--r--   1 tylerburns staff  64K Mar 27  2024 array.c
  -rw-r--r--   1 tylerburns staff  58K Mar 27  2024 attrib.c
  -rw-r--r--   1 tylerburns staff 1.1K Sep 25  2018 basedecl.h
</pre>

<p>
Notice the .c and .h files. These are both associated with the C programming language. We note here that C is a lower level language. It is much more verbose than what you see in R (or python for that matter), and you have to worry about a lot of things that get swept under the rug in R (like memory management) but it runs much faster.
</p>

<p>
If we then go into the file arithmetic.c, we find the place the addition operator is defined. The code below is C:
</p>

<div class="org-src-container">
<pre class="src src-C">attribute_hidden <span class="org-type">SEXP</span> <span class="org-function-name">do_arith</span>(<span class="org-type">SEXP</span> <span class="org-variable-name">call</span>, <span class="org-type">SEXP</span> <span class="org-variable-name">op</span>, <span class="org-type">SEXP</span> <span class="org-variable-name">args</span>, <span class="org-type">SEXP</span> <span class="org-variable-name">env</span>)
</pre>
</div>

<p>
Where this function takes care of many of the arithmetic operations. The SEXP means S-expression. The "op" is the operator of interest, which is +, -, *, or /.
</p>

<p>
Within this function, we can find a switch statement (think of this as an if statement across multiple cases), where the operators and actions are defined [1]. Again, the code below is C:
</p>

<div class="org-src-container">
<pre class="src src-C"><span class="org-keyword">switch</span> (PRIMVAL(op)) {
        <span class="org-keyword">case</span> PLUSOP: SET_SCALAR_DVAL(ans, x1 + x2); <span class="org-keyword">return</span> ans;
        <span class="org-keyword">case</span> MINUSOP: SET_SCALAR_DVAL(ans, x1 - x2); <span class="org-keyword">return</span> ans;
        <span class="org-keyword">case</span> TIMESOP: SET_SCALAR_DVAL(ans, x1 * x2); <span class="org-keyword">return</span> ans;
        <span class="org-keyword">case</span> DIVOP: SET_SCALAR_DVAL(ans, x1 / x2); <span class="org-keyword">return</span> ans;
}
</pre>
</div>

<p>
Where you can see that "+" is PLUSOP, where x1 + x2 is defined.
</p>
</div>
</div>

<div id="outline-container-org8de478d" class="outline-2">
<h2 id="org8de478d">From C to Assembly</h2>
<div class="outline-text-2" id="text-org8de478d">
<p>
So we started with 5 + 2 and now we are looking at an obscure switch statement in C. But if it is written in C, that means it is indirectly written in something deeper: machine code.
</p>

<p>
C code compiles down to what is known as machine code, which is the zeros and ones that allow the program to execute. There is a human-readable representation of machine code called Assembly that allows one to actually read and understand what is going on, with proper training.
</p>

<p>
In order for us to understand what is going on there, let's go ahead and return to 5 + 2, but write it in C. I note that below I am using a literate programming environment to run C, and the standard way to do it is to make a c script (eg. add<sub>two</sub><sub>numbers.c</sub>) and then compile it using a tool like gcc or clang, depending on what kind of computer you have. But anyway, here is the C code and its execution:
</p>

<div class="org-src-container">
<pre class="src src-C"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;stdio.h&gt;</span>

<span class="org-type">int</span> <span class="org-function-name">main</span>() {
    printf(<span class="org-string">"%d"</span>, 5 + 2);
    <span class="org-keyword">return</span> 0;
}
</pre>
</div>

<pre class="example">
7
</pre>


<p>
We did a simple arithmetic operation. Add two numbers together and print it. "int main" is similar to "def main" in python. "printf" is the C way of printing, where you declare what data type you are printing ("%d" is going to be an integer), and then what you're printing. Here, C adds 5 and 2 and then prints it.
</p>

<p>
Then it returns 0, which is a way of explicitly saying "exit the program." Exiting with 0 indicates that the program ran successfully, by convention. R does this too under the hood, and this becomes important if you are running R from the command line. The function quit(), which you can read about in the documentation <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/quit">here</a>, allows you to explicitly exit in R, also retruning an exit code with the same convention of 0 meaning no errors.
</p>

<p>
Anyway, we have looked at C, but what is actually happening in Assembly?
</p>

<p>
To answer that question, we will go ahead and print out the Assembly code associated with the function, and have a look at it. It is going to be really complicated looking but we will just look at a few pieces of it so you can have a feel for what is going on here.
</p>

<p>
We do this in the literate programming environment we have here by running the following shell script, which takes the code we wrote above and prints out the assembly.
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="org-builtin">echo</span> <span class="org-string">'#include &lt;stdio.h&gt;</span>
<span class="org-string">int main() {</span>
<span class="org-string">    printf("%d", 5 + 2);</span>
<span class="org-string">    return 0;</span>
<span class="org-string">}'</span> &gt; temp.c
gcc -S -o temp.s -fno-asynchronous-unwind-tables -fno-verbose-asm -O2 temp.c
cat temp.s
</pre>
</div>

<p>
Which we then put into another code block to make it a bit less ugly. This is what Assembly looks like. This is the kind of thing being swept under the rug when you do 5 + 2 and print it out. This is going to look messy and you don't have to fully understand it. I just want you to see what it looks like. Note also that the code below is ARM Assembly, because this was made on a MacBook Pro with a M1 architecture. Those who have another architecture, like x86, will have Assembly that looks similar in concept, but has slightly different syntax.
</p>

<p>
Anyway, here's the Assembly from the C code above:
</p>

<div class="org-src-container">
<pre class="src src-asm">        <span class="org-keyword">.section</span>        __TEXT,__text,regular,pure_instructions
        <span class="org-keyword">.build_version</span> macos, 14, 0     sdk_version 14, 2
        <span class="org-keyword">.globl</span>  _main
        <span class="org-keyword">.p2align</span>        2
<span class="org-function-name">_main</span>:
        <span class="org-keyword">.cfi_startproc</span>
        <span class="org-keyword">sub</span>     sp, sp, #32
        <span class="org-keyword">.cfi_def_cfa_offset</span> 32
        <span class="org-keyword">stp</span>     x29, x30, [sp, #16]
        <span class="org-keyword">add</span>     x29, sp, #16
        <span class="org-keyword">.cfi_def_cfa</span> w29, 16
        <span class="org-keyword">.cfi_offset</span> w30, -8
        <span class="org-keyword">.cfi_offset</span> w29, -16
        <span class="org-keyword">mov</span>     w8, #7
        <span class="org-keyword">str</span>     x8, [sp]
<span class="org-function-name">Lloh0</span>:
        <span class="org-keyword">adrp</span>    x0, l_.str@PAGE
<span class="org-function-name">Lloh1</span>:
        <span class="org-keyword">add</span>     x0, x0, l_.str@PAGEOFF
        <span class="org-keyword">bl</span>      _printf
        <span class="org-keyword">mov</span>     w0, #0
        <span class="org-keyword">ldp</span>     x29, x30, [sp, #16]
        <span class="org-keyword">add</span>     sp, sp, #32
        <span class="org-keyword">ret</span>
        <span class="org-keyword">.loh</span> AdrpAdd    Lloh0, Lloh1
        <span class="org-keyword">.cfi_endproc</span>

        <span class="org-keyword">.section</span>        __TEXT,__cstring,cstring_literals
<span class="org-function-name">l</span>_.str:
        <span class="org-keyword">.asciz</span>  <span class="org-string">"%d"</span>

<span class="org-keyword">.subsections_via_symbols</span>
</pre>
</div>

<p>
Yes, this is kindof a lot. I get it. Again, you don't have to fully understand it. I just want to zoom in on a few things. The first is that it's basically a recipe. There is a sort of step by step execution taking place. A command followed by some symbols. Similar to the format of the S-expression from earlier:
</p>

<p>
(function arg1 arg2 &#x2026;)
</p>

<p>
Now let's find 5 + 2. We note that it is pre-computed by the <a href="https://en.wikipedia.org/wiki/Compiler">compiler</a> as an optimization, so the remaining assembly instructions start with the number 7 (I actually didn't expect this&#x2026;call it learn by doing). Many modern compilers do this, and it's known as <a href="https://en.wikipedia.org/wiki/Constant_folding">constant folding</a>.
</p>

<p>
There are other instances (beyond the scope of this document) where a function called "add" is called directly within Assembly. Below is what happens with the number 7 in our Assembly code:
</p>

<div class="org-src-container">
<pre class="src src-asm"><span class="org-function-name">mov</span> <span class="org-keyword">w8</span>, #7             <span class="org-comment-delimiter">; </span><span class="org-comment">Equivalent to x &lt;- 5 + 2 in R (precomputed by the compiler)</span>
<span class="org-function-name">str</span> <span class="org-keyword">x8</span>, [sp]           <span class="org-comment-delimiter">; </span><span class="org-comment">Store value (7) on the stack</span>
</pre>
</div>

<p>
As a quick primer, ARM64 (my computer architecture) has 64-bit memory registers x0 to x30. We can refer to them directly, but if we only want to refer to the lower 32 bits of the registers, we can use w0 to w30 to refer to each of the registers, where the numbers denote the same physical register. So x8 and w8 both are referring to the same physical register. At the time of writing <span class="timestamp-wrapper"><span class="timestamp">[2025-01-19 Sun]</span></span>, I have not done enough Assembly to tell you when you would refer to "w" versus "x" for a given physical register.
</p>

<p>
Anyway in this chunk, you have "mov" which is a function that moves the second argument, 7, into a memory register called w8. From there, the value gets stored on the stack, referring to x8, which is valid as we have explained above.
</p>

<p>
The stack is a region in the computer's memory where local variables can be stored. It is analogous to the "local environment" in R/Python.
</p>

<p>
From here, the main task is to print it out. Where does that take place? Here:
</p>

<div class="org-src-container">
<pre class="src src-asm"><span class="org-function-name">bl</span> _printf <span class="org-comment-delimiter">; </span><span class="org-comment">Call `printf` (similar to calling `print` in R)</span>
</pre>
</div>

<p>
And then there is that "return 0" from C that we had seen before. Again, this is an interesting concept whereby you have to explicitly tell the program to stop running, and indicate whether the program ran successfully. A return of 0 indicates that it ran successfully. This is something we don't worry about in R, but it is something that happens under the hood. Below is what is actually happening in Assembly:
</p>

<div class="org-src-container">
<pre class="src src-asm"><span class="org-function-name">mov</span> <span class="org-keyword">w0</span>, #0             <span class="org-comment-delimiter">; </span><span class="org-comment">Set return value to 0</span>
<span class="org-function-name">ldp</span> <span class="org-keyword">x29</span>, x30, [sp]     <span class="org-comment-delimiter">; </span><span class="org-comment">Restore the frame pointer and return address</span>
<span class="org-function-name">add</span> <span class="org-keyword">sp</span>, sp, #32        <span class="org-comment-delimiter">; </span><span class="org-comment">Clean up the stack</span>
<span class="org-function-name">ret</span>                    <span class="org-comment-delimiter">; </span><span class="org-comment">Return to the caller (like `return()`</span>
</pre>
</div>

<p>
Notice the "mov" function again, where here we are moving the number 0 into another memory register called w0. Again, the exit code of zero is a convention that typically means "no errors."
</p>

<p>
Ok, wrapping up this section, we can see a few important things. The first is that the lowest level of code, well underneath R, is all a big recipe, where instructions are computed line by line, as explicit as possible, all the way to telling the computer to exit the program and that there was no errors.
</p>

<p>
Another important thing is that within this recipe, while there are a number of commands, these generally boil down to simple actions, like moving things into registers, running functions like printf, managing memory (the stack in our example), and returning with an exit code.
</p>
</div>
</div>

<div id="outline-container-org5bae261" class="outline-2">
<h2 id="org5bae261">Conclusion</h2>
<div class="outline-text-2" id="text-org5bae261">
<p>
Ok, let's go back to familiarity now.
</p>

<div class="org-src-container">
<pre class="src src-R">5 + 2
</pre>
</div>

<pre class="example">
[1] 7
</pre>


<p>
And you can now see just how much is swept under the rug. We started with 5 + 2. We then showed that we could make the equivalent statement as an S-expression and have it successfully run in R. This is because R will parse 5 + 7 into an S-expression internally. We then showed that R's built-in arithmetic functions are written in C. We then looked at the C code behind the S-expression that defines arithmetic operations in R. And from there, we looked at the Assembly code that underlies C.
</p>

<p>
To summarize as a list:
</p>

<ol class="org-ol">
<li>R code (5 + 2) -&gt; internally becomes an S-expression (`+`(5,2)).</li>
<li>Arithmetic in R -&gt; implemented in C code.</li>
<li>C code -&gt; compiled to machine code, which we can view as Assembly.</li>
<li>Assembly -&gt; direct instructions for the CPU: move data into registers, call functions, manage the stack, exit.</li>
</ol>

<p>
What is the point?
</p>

<p>
What has helped me solve the truly difficult problems, where no one has written the book on the thing, is understanding first principles. This means understanding the concepts that underlie whatever I'm doing. This is similar to how as a biologist, you have to learn chemistry and physics as part of the curriculum.
</p>

<p>
Similar to here, if you started in R and Python, you should have familiarity with the languages that are lower level, like C (even if it's literally at the level of very basic operations like printing something or writing a simple function). And you should at least know what Assembly looks like and what it generally does.
</p>

<p>
Be familiar with the full stack. Whatever it is. Go down the rabbit hole, as far as you can. And you will be a better problem solver, able to see the high-level, and able to reason from first principles.
</p>

<p>
And of course, we can be grateful for the sheer volume of things we don't have to worry about now because of the coders before us, who innovated so we didn't have to worry about analyzing single-cell sequencing data in Assembly.
</p>

<p>
We truly stand on the shoulders of giants before us.
</p>

<hr />

<p>
[1] We note that R has a switch as well, which you can read about in the documentation <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/switch">here</a>. Note that in R, switch is a function, and not a statement.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: January 19, 2025 - January 20, 2025</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)</p>
</div>
</body>
</html>
