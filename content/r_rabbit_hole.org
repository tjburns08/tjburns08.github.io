#+Title: The R Rabbit Hole
#+Author: Tyler Burns
#+Date: January 19, 2025 - January 19, 2025

[[./index.html][Home]]

-----
/I almost wish I hadn't gone down that rabbit-hole—and yet—and yet—it's rather curious, you know, this sort of life!/

Lewis Carroll, Alice's Adventures in Wonderland
-----

** From R to S

Let's begin with a simple expression in R. Adding two numbers together.

#+begin_src R :exports both :results output
5 + 2
#+end_src

#+RESULTS:
: [1] 7

Now what we are going to do is ask the simple question: what is actually happening under the hood here. In my Advanced R class that I took around 2016, I learned that R uses an old concept called S-expressions, or symbolic expressions. The way this works is you have a list whereby the first element is a function, followed by the function arguments.

We know of this in the form:
function(arg1, arg2, ...)

But here with "+" we can actually express this in the same format and we will get the same result. Directly in R. Try it yourself.

#+begin_src R :exports both :results output
`+`(5, 2)
#+end_src

#+RESULTS:
: [1] 7

S-expressions are a hallmark of an even older programming language called LISP (something Emacs users will still be famililar with today). If we want to see what S-expressions look like in this regard, consider the following LISP code below:

#+begin_src elisp :exports both
(+ 5 2)
#+end_src

#+RESULTS:
: 7

S-expressions can get pretty gnarly looking to the untrained eye. Let's say I wanted to do something like this:

2 * (5 + 2)

Which equals 14.

What that looks like as an S-expression is something like this:

#+begin_src elisp :exports both
(* 2 (+ 5 2))
#+end_src

#+RESULTS:
: 14

And lets say we wanted to divide the resulting answer by 7, which would give us 2. We have:

#+begin_src elisp :exports both
(/ (* 2 (+ 5 2)) 7)
#+end_src

#+RESULTS:
: 2

So you can imagine if you want to in turn take this product and do something else with it, and so forth, you will end up with parentheses wrapped in parentheses, and so forth. LISP programmers are used to it, and it is a bit of a [[https://xkcd.com/297/][running joke]].

But here's the rub: R operates like this. Let me show you. Below is R:

#+begin_src R :exports both :results output
`/`(`*`(2, `+`(5, 2)), 7)
#+end_src

#+RESULTS:
: [1] 2

So now you can see objectively that there is a chunk of R that is rooted in something much older than R.

** From S to C

Ok, this is all well and good, but how do I know that R specifically had S-expressions in mind? In order to answer that, we can download the [[https://cran.r-project.org/src/base/R-4/][source code]] of the R programming language and have a look at it. Below is the source code from R 4.4.0.

The directory looks like this:

#+begin_src
  drwxr-xr-x  27 tylerburns staff  864 Apr 24  2024 doc
  drwxr-xr-x   8 tylerburns staff  256 Apr 24  2024 etc
  drwxr-xr-x  19 tylerburns staff  608 Apr 24  2024 m4
  drwxr-xr-x   7 tylerburns staff  224 Mar 27  2024 po
  drwxr-xr-x  12 tylerburns staff  384 Apr 24  2024 share
  drwxr-xr-x  13 tylerburns staff  416 Apr 24  2024 src
  drwxr-xr-x 129 tylerburns staff 4.1K Apr 24  2024 tests
  drwxr-xr-x  24 tylerburns staff  768 Apr 24  2024 tools
  -rw-r--r--   1 tylerburns staff  18K Sep 25  2018 COPYING
  -rw-r--r--   1 tylerburns staff  210 Sep 25  2018 ChangeLog
  -rw-r--r--   1 tylerburns staff 1.8K Sep 25  2018 INSTALL
  -rw-r--r--   1 tylerburns staff 5.4K Mar 24  2023 Makeconf.in
  -rw-r--r--   1 tylerburns staff 7.1K Mar 25  2022 Makefile.fw
  -rw-r--r--   1 tylerburns staff  11K Mar 27  2024 Makefile.in
  -rw-r--r--   1 tylerburns staff 4.1K Sep 25  2018 README
  -rw-r--r--   1 tylerburns staff   46 Apr 24  2024 SVN-REVISION
  -rw-r--r--   1 tylerburns staff    6 Apr 24  2024 VERSION
  -rw-r--r--   1 tylerburns staff   10 Apr 10  2024 VERSION-NICK
  -rw-r--r--   1 tylerburns staff  19K Mar 27  2024 config.site
  -rwxr-xr-x   1 tylerburns staff 1.7M Apr 24  2024 configure
  -rw-r--r--   1 tylerburns staff 104K Mar 27  2024 configure.ac
  -rw-r--r--   1 tylerburns staff  356 Mar 24  2023 configure.patch
#+end_src

From here, you're going to go into src. And then main. The first observation is that a whole lot of this is written in C. Here is a slice of the "main" directory:

#+begin_src
-rw-r--r--   1 tylerburns staff 8.0K Mar 27  2024 CommandLineArgs.c
  -rw-r--r--   1 tylerburns staff 8.4K Mar 27  2024 Makefile.in
  -rw-r--r--   1 tylerburns staff 2.8K Mar 27  2024 Makefile.win
  -rw-r--r--   1 tylerburns staff 1.3K Sep 25  2018 RBufferUtils.h
  -rw-r--r--   1 tylerburns staff  27K Mar 27  2024 RNG.c
  -rw-r--r--   1 tylerburns staff 1.9K Mar 29  2019 Rcomplex.h
  -rw-r--r--   1 tylerburns staff  51K Mar 27  2024 Rdynload.c
  -rw-r--r--   1 tylerburns staff  13K Mar 27  2024 Renviron.c
  -rw-r--r--   1 tylerburns staff 1.3K Sep 25  2018 Rmain.c
  -rw-r--r--   1 tylerburns staff  34K Mar 24  2023 Rstrptime.h
  -rw-r--r--   1 tylerburns staff  25K Mar 27  2024 agrep.c
  -rw-r--r--   1 tylerburns staff  14K Sep 25  2018 alloca.c
  -rw-r--r--   1 tylerburns staff  59K Mar 27  2024 altclasses.c
  -rw-r--r--   1 tylerburns staff  34K Mar 24  2023 altrep.c
  -rw-r--r--   1 tylerburns staff  14K Mar 27  2024 apply.c
  -rw-r--r--   1 tylerburns staff  65K Mar 27  2024 arithmetic.c
  -rw-r--r--   1 tylerburns staff 3.5K Mar 25  2022 arithmetic.h
  -rw-r--r--   1 tylerburns staff  64K Mar 27  2024 array.c
  -rw-r--r--   1 tylerburns staff  58K Mar 27  2024 attrib.c
  -rw-r--r--   1 tylerburns staff 1.1K Sep 25  2018 basedecl.h
#+end_src

Notice the .c and .h files. These are both associated with the C programming language. We note here that C is a lower level language. It is much more verbose than what you see in R (or python for that matter), and you have to worry about a lot of things that get swept under the rug in R (like memory management) but it runs much faster.

If we then go into the file arithmetic.c, we find the place the addition operator is defined:

#+begin_src C :eval no
attribute_hidden SEXP do_arith(SEXP call, SEXP op, SEXP args, SEXP env)
#+end_src

Where this function takes care of many of the arithmetic operations. The SEXP means S-expression. The "op" is the operator of interest, which is +, -, *, or /.

Within this function, we can find a switch statement (think of this as an if statement across multiple cases), where the operators and actions are defined:

#+begin_src C :eval no
switch (PRIMVAL(op)) {
	case PLUSOP: SET_SCALAR_DVAL(ans, x1 + x2); return ans;
	case MINUSOP: SET_SCALAR_DVAL(ans, x1 - x2); return ans;
	case TIMESOP: SET_SCALAR_DVAL(ans, x1 * x2); return ans;
	case DIVOP: SET_SCALAR_DVAL(ans, x1 / x2); return ans;
}
#+end_src

Where you can see that "+" is PLUSOP, where x1 + x2 is defined.

** From C to Assembly

So we started with 5 + 7 and now we are looking at an obscure switch statement in C. But if it is written in C, that means it is indirectly written in something deeper: machine code.

C code compiles down to what is known as machine code, which is the zeros and ones that allow the program to execute. There is a human-readable representation of machine code called Assembly that allows one to actually read and understand what is going on, with proper training.

In order for us to understand what is going on there, let's go ahead and return to 5 + 7, but write it in C. I note that below I am using a literate programming environment to run C, and the standard way to do it is to make a c script (eg. add_two_numbers.c) and then compile it using a tool like gcc or clang, depending on what kind of computer you have. But anyway, here is the C code and its execution:

#+begin_src C :exports both :results output
#include <stdio.h>

int main() {
    printf("%d", 5 + 2);
    return 0;
}
#+end_src

#+RESULTS:
: 7

We did a simple arithmetic operation. Add two numbers together and print it. But what is actually happening in Assembly. To answer that question, we will go ahead and print out the Assembly code associated with the function, and have a look at it. It is going to be really complicated looking but we will just look at a few pieces of it so you can have a feel for what is going on here.

We do this in-line by running the following shell script, which in turn prints out the assembly.

#+begin_src shell :eval no
echo '#include <stdio.h>
int main() {
    printf("%d", 5 + 2);
    return 0;
}' > temp.c
gcc -S -o temp.s -fno-asynchronous-unwind-tables -fno-verbose-asm -O2 temp.c
cat temp.s
#+end_src

Which we then put into another code block to make it a bit less ugly.

#+begin_src asm
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 14, 0	sdk_version 14, 2
	.globl	_main
	.p2align	2
_main:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, #7
	str	x8, [sp]
Lloh0:
	adrp	x0, l_.str@PAGE
Lloh1:
	add	x0, x0, l_.str@PAGEOFF
	bl	_printf
	mov	w0, #0
	ldp	x29, x30, [sp, #16]
	add	sp, sp, #32
	ret
	.loh AdrpAdd	Lloh0, Lloh1
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
l_.str:
	.asciz	"%d"

.subsections_via_symbols
#+end_src

Ok, this is a mess. I get it. Let's just zoom in on a few things. The first is that it's basically a recipe or protocol. There is a sort of step by step execution taking place. A command followed by some symbols. Similar to the format of the S-expression from earlier:

(function arg1 arg2 ...)

Now let's find 5 + 2. We note that it is pre-computed by the compiler, so the remaining assembly instructions start with the number 7. There are other instances (beyond the scope of this document) where a function called "add" is called directly within Assembly:

#+begin_src asm :eval no
    mov w8, #7             ; Equivalent to x <- 5 + 2 in R (precomputed by the compiler)
    str x8, [sp]           ; Store value (7) on the stack
#+end_src

The stack is a "stack" or memory addresses where, for example, data like the values of variables are stored.

Here, the 5 + 2 was pre-computed at compile time and, and is now directly in the assembly instructions as 7. This is in turn stored. In this line, the number 7 is being moved into a specific register (place where you can store stuff) called w8.

From here, the main task is to print it out. Where does that take place? Here:

#+begin_src asm :eval no
    bl _printf ; Call `printf` (similar to calling `print` in R)
#+end_src

And then there is that "return 0" but from C. This is an interesting concept whereby you have to explicitly tell the program to stop running. This is something we don't worry about in R, but it is something that happens under the hood:

#+begin_src asm :eval no
    mov w0, #0             ; Set return value to 0
    ldp x29, x30, [sp]     ; Restore the frame pointer and return address
    add sp, sp, #32        ; Clean up the stack
    ret                    ; Return to the caller (like `return()`
#+end_src

Ok, let's go back to familiarity now.

#+begin_src R :exports both :results output
5 + 2
#+end_src

#+RESULTS:
: [1] 7

** Conclusion

And you can now see just how much is swept under the rug. We started with 5 + 2. We then showed that we could make the equivalent statement as an S-expression and have it successfully run in R. We then showed some more complex S-expressions and showed that counter-intuitively they run in R. We then looked at the C code behind the S-expression that defines arithmetic operations in R. And from there, we looked at the Assembly code that underlies C.

We truly stand on the shoulders of giants before us.
